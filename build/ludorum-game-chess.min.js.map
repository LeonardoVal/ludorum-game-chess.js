{"version":3,"sources":["../src/__prologue__.js","../src/Chess.js","../src/__epilogue__.js"],"names":["__init__","base","Sermat","ludorum","ChessJS","declare","iterable","players","UserInterface","Chess","CHESS","INITIAL_FEN","fen","exports","__package__","__name__","__dependencies__","__SERMAT__","include","syncGlobalChess","__currentFEN__","load","PIECES","Game","name","constructor","params","this","globalChess","call","turn","moves","r","game_over","activePlayer","next","haps","update","raiseIf","move","result","in_checkmate","defeat","tied","static __SERMAT__","identifier","serializer","obj","clone","toString","toFEN","static fromFEN","str","square","p","n","b","q","k","coord","Array","isArray","charAt","get","player","color","type","static heuristics","games","push"],"mappings":";;+VAEA,SAASA,EAASC,EAAMC,EAAQC,EAASC,GAAW,aAEnD,IAAIC,EAAUJ,EAAKI,QACPJ,EAAKK,SACAH,EAAQI,QAAQC,cAGV,iBAAZJ,IACVA,EAAUA,EAAQK,OAEnB,IAAIC,EAAQN,IACXO,EAAcD,EAAME,MAGjBC,GACHC,YAAa,qBACbC,SAAU,qBACVf,SAAUA,EACVgB,kBAAmBf,EAAMC,EAAQC,EAASC,GAC1Ca,YAAcC,SAAUjB,EAAME,KChBhC,SAASgB,EAAgBP,GAMxB,OALAA,EAAMA,GAAOD,EACTD,EAAMU,iBAAmBR,IAC5BF,EAAMW,KAAKT,GACXF,EAAMU,eAAiBR,GAEjBF,EAGR,IA2FMY,EA3FFb,EAAQI,EAAQJ,MAAQJ,EAAQF,EAAQoB,MAC3CC,KAAM,QAINjB,SAAS,QAAU,SAKnBkB,YAAa,SAAeC,GAC3BC,KAAKf,IAAMc,GAAUA,EAAOd,KAAOD,EACnC,IAAIiB,EAAcT,EAAgBQ,KAAKf,KACvCT,EAAQoB,KAAKM,KAAKF,KAAMA,KAAKpB,QAA+B,MAAvBqB,EAAYE,OAAiB,EAAI,KAQvEC,MAAO,WACN,IAAIH,EAAcT,EAAgBQ,KAAKf,KACtCoB,EAAI,KAKL,OAJKJ,EAAYK,eAChBD,MACEL,KAAKO,gBAAkBN,EAAYG,SAE/BC,GAKRG,KAAM,SAAcJ,EAAOK,EAAMC,GAChCpC,EAAKqC,QAAQF,EAAM,gCAAiCA,EAAM,MAC1D,IAAIR,EAAcT,EAAgBQ,KAAKf,KAEvC,GADAgB,EAAYW,KAAKR,EAAMJ,KAAKO,kBACxBG,EAGH,OAAO,IAAIV,KAAKF,aAAcb,IAAKgB,EAAYhB,QAF/Ce,KAAKf,IAAMgB,EAAYhB,OAQzB4B,OAAQ,WACP,IAAIZ,EAAcT,EAAgBQ,KAAKf,KACvC,OAAKgB,EAAYK,YAENL,EAAYa,eACfd,KAAKe,SAELf,KAAKgB,OAJL,MAYTC,qBACCC,WAAY,QACZC,WAAY,SAAyBC,GACpC,QAAUnC,IAAKmC,EAAInC,QAIrBoC,MAAO,WACN,OAAO,IAAIrB,KAAKF,YAAYE,KAAKf,MAMlCqC,SAAU,WACT,OAAOtB,KAAKuB,SAGbA,MAAO,WACN,OAAOvB,KAAKf,KAMbuC,iBAAkB,SAAiBC,GAClC,OAAO,IAAIzB,MAAOf,IAAKe,KAAKf,OAG7ByC,QACK/B,GACHgC,EAAG,OAAQC,EAAG,SAAUC,EAAG,SAAUxB,EAAG,OAAQyB,EAAG,QAASC,EAAG,QAEzD,SAAgBC,GAClBC,MAAMC,QAAQF,KACjBA,EAAQ,WAAWG,OAAOH,EAAM,KAAOA,EAAM,GAAK,IAEnD,IACC3B,EADiBb,EAAgBQ,KAAKf,KACtBmD,IAAIJ,GAKrB,OAJI3B,IACHA,EAAEgC,OAASrC,KAAKpB,QAAoB,MAAZyB,EAAEiC,MAAgB,EAAI,GAC9CjC,EAAER,KAAOF,EAAOU,EAAEkC,OAEZlC,IASTmC,yBC9HA,ODqIDhE,EAAQiE,MAAM3D,MAAQA,EAItBA,EAAMQ,WAAW4B,WAAahC,EAAQC,YAAY,IAAML,EAAMQ,WAAW4B,WACzEhC,EAAQI,WAAWC,QAAQmD,KAAK5D,GAChCP,EAAOgB,QAAQL,GC3IPA","file":"ludorum-game-chess.min.js","sourcesContent":["/** Package wrapper and layout.\n*/\nfunction __init__(base, Sermat, ludorum, ChessJS) { \"use strict\";\n// Import synonyms. ////////////////////////////////////////////////////////////////////////////////\n\tvar declare = base.declare,\n\t\titerable = base.iterable,\n\t\tUserInterface = ludorum.players.UserInterface;\n\n// Workaround for difference in module definition depending on platform. ///////////////////////////\n\tif (typeof ChessJS === 'object') {\n\t\tChessJS = ChessJS.Chess;\n\t}\n\tvar CHESS = ChessJS(),\n\t\tINITIAL_FEN = CHESS.fen();\n\n// Library layout. /////////////////////////////////////////////////////////////////////////////////\n\tvar exports = {\n\t\t__package__: 'ludorum-game-chess',\n\t\t__name__: 'ludorum_game_chess',\n\t\t__init__: __init__,\n\t\t__dependencies__: [base, Sermat, ludorum, ChessJS],\n\t\t__SERMAT__: { include: [base, ludorum] }\n\t};\n","/** # Chess\n\nImplementation of [Chess](http://www.fide.com/component/handbook/?id=124&view=article) for Ludorum.\n*/\n\nfunction syncGlobalChess(fen) {\n\tfen = fen || INITIAL_FEN;\n\tif (CHESS.__currentFEN__ !== fen) {\n\t\tCHESS.load(fen);\n\t\tCHESS.__currentFEN__ = fen;\n\t}\n\treturn CHESS;\n}\n\nvar Chess = exports.Chess = declare(ludorum.Game, {\n\tname: 'Chess',\n\n\t/** The game is played by two players: White and Black. White moves first.\n\t*/\n\tplayers: [\"White\", \"Black\"],\n\n\t/** The constructor takes the `activePlayer` (`\"White\"` by default), and the `board` as an\n\tinstance of `CheckerboardFromPieces` (with the initial setup by default).\n\t*/\n\tconstructor: function Chess(params){\n\t\tthis.fen = params && params.fen || INITIAL_FEN;\n\t\tvar globalChess = syncGlobalChess(this.fen);\n\t\tludorum.Game.call(this, this.players[globalChess.turn() === 'w' ? 0 : 1]);\n\t},\n\n\t// ## Game methods #############################################################################\n\n\t/** A move always places a piece in an empty square, if and only if by doing so one or more\n\tlines of the opponent's pieces get enclosed between pieces of the active player.\n\t*/\n\tmoves: function moves() {\n\t\tvar globalChess = syncGlobalChess(this.fen),\n\t\t\tr = null;\n\t\tif (!globalChess.game_over()) {\n\t\t\tr = {};\n\t\t\tr[this.activePlayer()] = globalChess.moves();\n\t\t}\n\t\treturn r;\n\t},\n\n\t/** TODO.\n\t*/\n\tnext: function next(moves, haps, update) {\n\t\tbase.raiseIf(haps, 'Haps are not required (given ', haps, ')!');\n\t\tvar globalChess = syncGlobalChess(this.fen);\n\t\tglobalChess.move(moves[this.activePlayer()]);\n\t\tif (update) {\n\t\t\tthis.fen = globalChess.fen();\n\t\t} else {\n\t\t\treturn new this.constructor({ fen: globalChess.fen() });\n\t\t}\n\t},\n\n\t/** TODO.\n\t*/\n\tresult: function result() {\n\t\tvar globalChess = syncGlobalChess(this.fen);\n\t\tif (!globalChess.game_over()) {\n\t\t\treturn null;\n\t\t} else if (globalChess.in_checkmate()) {\n\t\t\treturn this.defeat();\n\t\t} else {\n\t\t\treturn this.tied();\n\t\t}\n\t},\n\n\t// ## Utility methods ##########################################################################\n\n\t/** The game state serialization uses [Forsyth–Edwards notation](http://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation).\n\t*/\n\t'static __SERMAT__': {\n\t\tidentifier: 'Chess',\n\t\tserializer: function serialize_Chess(obj) {\n\t\t\treturn [{ fen: obj.fen }];\n\t\t}\n\t},\n\n\tclone: function clone() {\n\t\treturn new this.constructor(this.fen);\n\t},\n\n\t/** The default string representation of Chess is the\n\t[Forsyth–Edwards notation](http://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation).\n\t*/\n\ttoString: function toString() {\n\t\treturn this.toFEN();\n\t},\n\n\ttoFEN: function toFEN() {\n\t\treturn this.fen;\n\t},\n\n\t/** The `fromFEN` function parses a string in [Forsyth–Edwards notation](http://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation)\n\tand builds the corresponding game state.\n\t*/\n\t'static fromFEN': function fromFEN(str) {\n\t\treturn new this({ fen: this.fen });\n\t},\n\n\tsquare: (function () {\n\t\tvar PIECES = {\n\t\t\tp: 'Pawn', n: 'Knight', b: 'Bishop', r: 'Rook', q: 'Queen', k: 'King'\n\t\t};\n\t\treturn function square(coord) {\n\t\t\tif (Array.isArray(coord)) {\n\t\t\t\tcoord = 'abcdefgh'.charAt(coord[1]) + (coord[0] + 1);\n\t\t\t}\n\t\t\tvar globalChess = syncGlobalChess(this.fen),\n\t\t\t\tr = globalChess.get(coord);\n\t\t\tif (r) {\n\t\t\t\tr.player = this.players[r.color === 'w' ? 0 : 1];\n\t\t\t\tr.name = PIECES[r.type];\n\t\t\t}\n\t\t\treturn r;\n\t\t};\n\t})(),\n\n\t// ## Heuristics ###############################################################################\n\n\t/** `Chess.heuristics` is a bundle of helper functions to build heuristic evaluation functions\n\tfor this game.\n\t*/\n\t'static heuristics': {\n\t\t// TODO\n\t}\n}); // declare Othello.\n\n/** Adding Chess to `ludorum.games`.\n*/\nludorum.games.Chess = Chess;\n\n/** Sermat serialization.\n*/\nChess.__SERMAT__.identifier = exports.__package__ +'.'+ Chess.__SERMAT__.identifier;\nexports.__SERMAT__.include.push(Chess);\nSermat.include(exports);\n","// See __prologue__.js\n\treturn exports;\n}\n"]}