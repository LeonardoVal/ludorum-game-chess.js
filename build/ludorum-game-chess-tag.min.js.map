{"version":3,"sources":["../src/__prologue__.js","../src/Chess.js","../src/ChessBoard.js","../src/pieces.js","../src/__epilogue__.js"],"names":["__init__","base","Sermat","ludorum","declare","raiseIf","obj","copy","raise","Iterable","iterable","Game","Checkerboard","utils","exports","CheckerboardFromString","players","UserInterface","__package__","__name__","__dependencies__","__SERMAT__","include","Chess","ChessBoard","height","width","constructor","intArray","this","arrayToBoard","static arrayToBoard","split","forEach","k","i","piece","row","col","kind","toUpperCase","player","flags","index","toArray","boardToArray","static boardToArray","board","array","Uint8Array","fill","isValidPosition","pos","isEmptyPosition","hasOwnProperty","isPlayersPosition","canMoveTo","canCaptureAt","forward","rank","n","toString","range","map","toLowerCase","join","dual encodeMove","fromRow","fromCol","toRow","toCol","promotion","dual decodeMove","m","moves_Pawn","moves","row2","push","encodeMove","moves_Knight","filterApply","dr","dc","moves_Bishop","walks","DIRECTIONS","DIAGONAL","walk","cont","tail","takeWhile","p","r","flatten","moves_Rook","ORTHOGONAL","moves_Queen","EVERY","moves_King","apply","move","decodeMove","charAt","name","params","call","activePlayer","boardFromFEN","initialBoard","castling","enPassant","halfMoves","fullMoves","Math","max","game","pieces","kinds","mapApply","kindName","kindConstructor","toObject","forEachApply","_","King","checkMoves","length","Error","__moves__","next","haps","update","movingPiece","square","args","opponent","result","defeat","draw","static __SERMAT__","identifier","serializer","toFEN","materializer","fromFEN","clone","dual coordFromString","str","charCodeAt","dual coordToString","coord","String","fromCharCode","horizontals","hline","lineText","emptySquares","coordToString","static fromFEN","trim","match","FEN_REGEXP","exec","coordFromString","static FEN_REGEXP","dual boardFromFEN","rows","Pawn","Knight","b","Bishop","Rook","q","Queen","c","sq","isNaN","CheckerboardFromPieces","static heuristics","prototype","games","Piece","position","objects","unimplemented","canMove","moveTo","__place__","KINDS","direction","d","isValidCoord","promotions","DELTAS","s","abs"],"mappings":"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","file":"ludorum-game-chess-tag.min.js","sourcesContent":["/** Package wrapper and layout.\n*/\nfunction __init__(base, Sermat, ludorum) { \"use strict\";\n// Import synonyms. ////////////////////////////////////////////////////////////////////////////////\n\tvar declare = base.declare,\n\t\tobj = base.obj,\n\t\tcopy = base.copy,\n\t\traise = base.raise,\n\t\traiseIf = base.raiseIf,\n\t\tIterable = base.Iterable,\n\t\titerable = base.iterable,\n\t\tGame = ludorum.Game,\n\t\tCheckerboard = ludorum.utils.Checkerboard,\n\t\tCheckerboardFromString = ludorum.utils.CheckerboardFromString,\n\t\tUserInterface = ludorum.players.UserInterface;\n\n// Library layout. /////////////////////////////////////////////////////////////////////////////////\n\tvar exports = {\n\t\t__package__: 'ludorum-game-connect4',\n\t\t__name__: 'ludorum_game_connect4',\n\t\t__init__: __init__,\n\t\t__dependencies__: [base, Sermat, ludorum],\n\t\t__SERMAT__: { include: [base, ludorum] }\n\t};\n","/** # Chess\n\nImplementation of [Chess](http://www.fide.com/component/handbook/?id=124&view=article) for Ludorum.\n*/\n\nvar Chess = exports.Chess = declare(Game, {\n\tname: 'Chess',\n\n\t/** The game is played by two players: White and Black. White moves first.\n\t*/\n\tplayers: [\"White\", \"Black\"],\n\n\t/** The constructor takes the `activePlayer` (`\"White\"` by default), and the `board` as an\n\tinstance of `CheckerboardFromPieces` (with the initial setup by default).\n\t*/\n\tconstructor: function Chess(params){\n\t\tparams = params || {};\n\t\tGame.call(this, params.activePlayer || this.players[0]);\n\t\tthis.board = !params.board ? this.initialBoard()\n\t\t\t: typeof params.board === 'string' ? Chess.boardFromFEN(params.board)\n\t\t\t: params.board;\n\t\tthis.castling = params.castling || \"KQkq\";\n\t\tthis.enPassant = params.enPassant;\n\t\tthis.halfMoves = params.halfMoves |0;\n\t\tthis.fullMoves = Math.max(params.fullMoves |0, 1);\n\n\t\t// Classify pieces by player and kind.\n\t\tvar game = this;\n\t\tthis.pieces = iterable(this.players).map(function (player) {\n\t\t\treturn [player, iterable(game.kinds).mapApply(function (kindName, kindConstructor) {\n\t\t\t\treturn [kindName, []];\n\t\t\t}).toObject()];\n\t\t}).toObject();\n\t\titerable(this.board.pieces).forEachApply(function (_, piece) {\n\t\t\tgame.pieces[piece.player][piece.name].push(piece);\n\t\t});\n\t},\n\n\t// ## Game methods #############################################################################\n\n\t/** A move always places a piece in an empty square, if and only if by doing so one or more\n\tlines of the opponent's pieces get enclosed between pieces of the active player.\n\t*/\n\tmoves: function moves() {\n\t\tif (!this.hasOwnProperty('__moves__')) {\n\t\t\tvar game = this,\n\t\t\t\tboard = this.board,\n\t\t\t\tactivePlayer = this.activePlayer(),\n\t\t\t\tking = this.pieces[activePlayer].King[0];\n\t\t\t\tthis.checkMoves = []; /*FIXME iterable(this.pieces[this.opponent()]).select(1).flatten().filter(function (p) {\n\t\t\t\t\treturn p.canMove(king.position);\n\t\t\t\t}).toArray();*/\n\t\t\tif (this.checkMoves.length < 1) { // Active player's king is not in check.\n\t\t\t\tthis.__moves__ = base.obj(activePlayer, iterable(this.pieces[activePlayer])\n\t\t\t\t\t.mapApply(function (kind, pieces) {\n\t\t\t\t\t\treturn pieces;\n\t\t\t\t\t}).flatten().map(function (p) {\n\t\t\t\t\t\treturn p.moves(game, board);\n\t\t\t\t\t}).flatten().toArray()\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Do not know what to do when in check!');//FIXME\n\t\t\t}\n\t\t}\n\t\treturn this.__moves__;\n\t},\n\n\t/** TODO.\n\t*/\n\tnext: function next(moves, haps, update) {\n\t\t//FIXME WIP\n\t\traiseIf(haps, 'Haps are not required (given ', haps, ')!');\n\t\tvar activePlayer = this.activePlayer(),\n\t\t\tmove = moves[activePlayer],\n\t\t\tmovingPiece = this.board.square(move[1]);\n\t\t//console.log(this+\"\");//LOG\n\t\tvar args = {\n\t\t\tactivePlayer: this.opponent(),\n\t\t\tboard: movingPiece.next(this, this.board, move),\n\t\t\tcastling: this.castling,\n\t\t\tenPassant: null,\n\t\t\thalfMoves: this.halfMoves,\n\t\t\tfullMoves: this.fullMoves + (activePlayer === 'Black' ? 1 : 0)\n\t\t};\n\t\tif (update) {\n\t\t\tthis.constructor(args);\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn new this.constructor(args);\n\t\t}\n\t},\n\n\t/** TODO.\n\t*/\n\tresult: function result() {\n\t\t//FIXME\n\t\tif (this.moves()[this.activePlayer()]) {\n\t\t\treturn null;\n\t\t} else if (this.checkMoves.length > 0) { // Checkmate!\n\t\t\treturn this.defeat();\n\t\t} else { // Stalemate.\n\t\t\treturn this.draw();\n\t\t}\n\t},\n\n\t// ## Utility methods ##########################################################################\n\n\t/** The game state serialization uses [Forsyth–Edwards notation](http://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation).\n\t*/\n\t'static __SERMAT__': {\n\t\tidentifier: 'Chess',\n\t\tserializer: function serialize_Chess(obj) {\n\t\t\treturn [obj.toFEN()];\n\t\t},\n\t\tmaterializer: function materialize_Chess(obj, args) {\n\t\t\treturn args ? Chess.fromFEN(args[0]) : null;\n\t\t}\n\t},\n\n\tclone: function clone() { //FIXME Is this necessary?\n\t\treturn Chess.fromFEN(this.toFEN());\n\t},\n\n\t'dual coordFromString': function coordFromString(str) {\n\t\treturn [+str.charAt(1) + 1, str.charCodeAt(0) - 'a'.charCodeAt(0)];\n\t},\n\n\t'dual coordToString': function coordToString(coord) {\n\t\treturn String.fromCharCode('a'.charCodeAt(0) + coord[1]) + (coord[0] + 1);\n\t},\n\n\t/** The default string representation of Chess is the\n\t[Forsyth–Edwards notation](http://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation).\n\t*/\n\ttoString: function toString() {\n\t\treturn this.toFEN();\n\t},\n\n\ttoFEN: function toFEN() {\n\t\tvar board = this.board,\n\t\t\tresult = board.horizontals().map(function (hline) {\n\t\t\t\tvar lineText = '',\n\t\t\t\t\temptySquares = 0;\n\t\t\t\thline.forEach(function (coord) {\n\t\t\t\t\tvar p = board.square(coord);\n\t\t\t\t\tif (!p) {\n\t\t\t\t\t\temptySquares++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (emptySquares > 0) {\n\t\t\t\t\t\t\tlineText += emptySquares;\n\t\t\t\t\t\t\temptySquares = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlineText += p.toString();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (emptySquares > 0) {\n\t\t\t\t\tlineText += emptySquares;\n\t\t\t\t}\n\t\t\t\treturn lineText;\n\t\t\t}).join('/');\n\t\tresult += \" \"+ (this.activePlayer().charAt(0).toLowerCase());\n\t\tresult += \" \"+ this.castling;\n\t\tresult += \" \"+ (this.enPassant ? this.coordToString(this.enPassant) : \"-\");\n\t\tresult += \" \"+ this.halfMoves +\" \"+ this.fullMoves;\n\t\treturn result;\n\t},\n\n\t/** The `fromFEN` function parses a string in [Forsyth–Edwards notation](http://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation)\n\tand builds the corresponding game state.\n\t*/\n\t'static fromFEN': function fromFEN(str) {\n\t\tstr = str.trim();\n\t\tvar match = this.FEN_REGEXP.exec(str);\n\t\traiseIf(!match, \"Invalid FEN string '\", str, \"'!\");\n\t\treturn new this({\n\t\t\tboard: this.boardFromFEN(match[1]),\n\t\t\tactivePlayer: match[2] === 'w' ? 'White' : 'Black',\n\t\t\tcastling: match[3] === '-' ? \"\" : match[3],\n\t\t\tenPassant: match[4] === '-' ? null : this.coordFromString(match[4]),\n\t\t\thalfMoves: +match[5],\n\t\t\tfullMoves: +match[6]\n\t\t});\n\t},\n\n\t/** To parse a string in [Forsyth–Edwards notation](http://en.wikipedia.org/wiki/Forsyth%E2%80%93Edwards_Notation)\n\tthis is regular expression is used. Capturing groups are: board, active player, castling, en\n\tpassant, half move and full move. Spaces at beginning and end must be trimmed before matching.\n\t*/\n\t'static FEN_REGEXP':\n\t\t/^((?:[pnbrqkPNBRQK12345678]+\\/){7}[pnbrqkPNBRQK12345678]+)\\s+([wb])\\s+(-|[KQkq]+)\\s+(-|[a-h][1-8])\\s+(\\d+)\\s+(\\d+)$/,\n\n\t'dual boardFromFEN': function boardFromFEN(str) {\n\t\tvar rows = str.split('/'),\n\t\t\tkinds = {\n\t\t\t\t'p': this.kinds.Pawn,\n\t\t\t\t'n': this.kinds.Knight,\n\t\t\t\t'b': this.kinds.Bishop,\n\t\t\t\t'r': this.kinds.Rook,\n\t\t\t\t'q': this.kinds.Queen,\n\t\t\t\t'k': this.kinds.King\n\t\t\t},\n\t\t\tpieces = [];\n\t\trows.forEach(function (row, r) {\n\t\t\tvar c = 0;\n\t\t\titerable(row).forEach(function (sq) {\n\t\t\t\tif (!isNaN(sq)) {\n\t\t\t\t\tc += sq |0;\n\t\t\t\t} else {\n\t\t\t\t\tpieces.push(new kinds[sq.toLowerCase()](\n\t\t\t\t\t\tsq === sq.toLowerCase() ? 'Black' : 'White',\n\t\t\t\t\t\t[r, c]\n\t\t\t\t\t));\n\t\t\t\t\tc++;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn new ludorum.utils.CheckerboardFromPieces(8, 8, pieces);\n\t},\n\n\t// ## Heuristics ###############################################################################\n\n\t/** `Chess.heuristics` is a bundle of helper functions to build heuristic evaluation functions\n\tfor this game.\n\t*/\n\t'static heuristics': {\n\t\t// TODO\n\t}\n}); // declare Othello.\n\n// ## Initial board ################################################################################\n\n/** The initial board of Chess has the first rank of the board with the following pieces for Whites:\nRook, Knight, Bishop, Queen, King, Bishop, Knight and Rook. The next rank has 8 Pawns. Blacks have a\nsymmetrical layout on their ranks.\n*/\nChess.initialBoard = Chess.prototype.initialBoard = function () {\n\treturn Chess.boardFromFEN('rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR');\n};\n\n/** Adding Chess to `ludorum.games`.\n*/\nludorum.games.Chess = Chess;\n\n/** Sermat serialization.\n*/\nChess.__SERMAT__.identifier = exports.__package__ +'.'+ Chess.__SERMAT__.identifier;\nexports.__SERMAT__.include.push(Chess);\nSermat.include(exports);\n","/** # Chess piece kinds\n\nThe piece `kinds` of Chess are: Pawn, Knight, Bishop, Rook, Queen and King.\n*/\nvar ChessBoard = exports.ChessBoard = declare({\n\theight: 8,\n\twidth: 8,\n\n\tconstructor: function constructor(intArray) {\n\t\tthis.constructor.arrayToBoard(intArray, this);\n\t},\n\n\t'static arrayToBoard': function arrayToBoard(intArray, obj) {\n\t\tobj = obj || {};\n\t\t'RNBQKBNRPPPPPPPPpppppppprnbqkbnr'.split('').forEach(function (k, i) {\n\t\t\tvar piece = intArray[i];\n\t\t\tif (piece < 0xFF) { // 0xFF means piece is not in the board.\n\t\t\t\tvar row = piece & 0x7,\n\t\t\t\t\tcol = (piece & 0x38) >> 3,\n\t\t\t\t\tkind = k.toUpperCase();\n\t\t\t\tobj[row +','+ col] = {\n\t\t\t\t\tplayer: kind === k ? 0 : 1,\n\t\t\t\t\tkind: kind,\n\t\t\t\t\trow: row,\n\t\t\t\t\tcol: col,\n\t\t\t\t\tflags: flags,\n\t\t\t\t\tindex: i\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\treturn obj;\n\t},\n\n\ttoArray: function toArray() {\n\t\treturn this.constructor.boardToArray(this);\n\t},\n\n\t'static boardToArray': function boardToArray(board, array) {\n\t\tarray = array || (new Uint8Array(32)).fill(0xFF);\n\t\tvar piece;\n\t\tfor (var k in board) {\n\t\t\tpiece = board[k];\n\t\t\tarray[piece.index] = (piece.col & 0x7) << 3 | (piece.row & 0x7);\n\t\t}\n\t\treturn array;\n\t},\n\n\t// ## Board information #######################################################################\n\n\tisValidPosition: function isValidPosition(pos) {\n\t\tvar row = pos[0],\n\t\t\tcol = pos[1];\n\t\treturn row >= 0 && row < this.width && col >= 0 && col < this.height;\n\t},\n\n\tisEmptyPosition: function isEmptyPosition(pos) {\n\t\treturn this.isValidPosition(pos) && !this.hasOwnProperty(pos[0] +','+ pos[1]);\n\t},\n\n\tisPlayersPosition: function isPlayersPosition(pos, player) {\n\t\treturn this.isValidPosition(pos) && this.hasOwnProperty(pos[0] +','+ pos[1]) &&\n\t\t\tthis[pos[0] +','+ pos[1]].player === player;\n\t},\n\n\tcanMoveTo: function isPlayersPosition(pos, player) {\n\t\treturn this.isValidPosition(pos) && (!this.hasOwnProperty(pos[0] +','+ pos[1]) ||\n\t\t\tthis[pos[0] +','+ pos[1]].player !== player);\n\t},\n\n\tcanCaptureAt: function canCaptureAt(pos, player) {\n\t\treturn this.isValidPosition(pos) && this.hasOwnProperty(pos[0] +','+ pos[1]) &&\n\t\t\tthis[pos[0] +','+ pos[1]].player !== player;\n\t},\n\n\tforward: function forward(player) {\n\t\treturn player === 0 ? +1 : -1;\n\t},\n\n\trank: function rank(n, player) {\n\t\treturn player === 0 ? n - 1 : this.height - n;\n\t},\n\n\ttoString: function toString() {\n\t\tvar board = this,\n\t\t\tstr = '';\n\t\treturn Iterable.range(8).map(function (row) {\n\t\t\treturn Iterable.range(8).map(function (col) {\n\t\t\t\tpiece = board[row +','+ col];\n\t\t\t\treturn !piece ? '.' :\n\t\t\t\t\tpiece.player === 0 ? piece.kind.toUpperCase() : piece.kind.toLowerCase();\n\t\t\t}).join('');\n\t\t}).join('\\n');\n\t},\n\n\t// ## Moves ###################################################################################\n\n\t'dual encodeMove': function encodeMove(fromRow, fromCol, toRow, toCol, promotion) {\n\t\tfromRow = fromRow & 0x7; \n\t\tfromCol = fromCol & 0x7;\n\t\ttoRow = toRow & 0x7;\n\t\ttoCol = toCol & 0x7;\n\t\tpromotion = promotion & 0x7;\n\t\treturn (((promotion << 3 | fromRow) << 3 | fromCol) << 3 | toRow) << 3 | toCol;\n\t},\n\t\n\t'dual decodeMove': function decodeMove(m) {\n\t\tpromotion = (m >> 10) & 0x7;\n\t\tfromRow = (m >> 9) & 0x7; \n\t\tfromCol = (m >> 6) & 0x7;\n\t\ttoRow = (m >> 3) & 0x7;\n\t\ttoCol = m & 0x7;\n\t\treturn [[fromRow, fromCol], [toRow, toCol], flags, promotion];\n\t},\n\n\tmoves_Pawn: function moves_Pawn(piece) {\n\t\tvar forward = this.forward(piece.player),\n\t\t\tmoves = [],\n\t\t\trow2 = piece.row + forward;\n\t\tif (this.isEmptyPosition([row2, piece.col])) { // move forward\n\t\t\tmoves.push(this.encodeMove(piece.row, piece.col, row2, piece.col));\n\t\t}\n\t\tif (piece.row === this.rank(2, piece.player) && this.isEmptyPosition([piece.row + 2 * forward, piece.col])) { // move 2 squares forward\n\t\t\tmoves.push(this.encodeMove(piece.row, piece.col, piece.row + 2 * forward, piece.col));\n\t\t}\n\t\tif (this.canCaptureAt([row2, piece.col - 1], piece.player)) { // captures\n\t\t\tmoves.push(this.encodeMove(piece.row, piece.col, row2, piece.col - 1));\n\t\t}\n\t\tif (this.canCaptureAt([row2, piece.col + 1], piece.player)) { // captures\n\t\t\tmoves.push(this.encodeMove(piece.row, piece.col, row2, piece.col + 1));\n\t\t}\n\t\t/*TODO Promotions\n\t\tif (this.position[0] === (direction < 0 ? 1 : board.height - 2)) { // Promotions at the last rank.\n\t\t\tvar promotions = ['Knight', 'Bishop', 'Rook', 'Queen'];\n\t\t\treturn iterable(r).map(function (p) {\n\t\t\t\treturn promotions.map(function (k) {\n\t\t\t\t\treturn ['promote', piece.position, p, k];\n\t\t\t\t});\n\t\t\t}).flatten();\n\t\t} else {\n\t\t\treturn iterable(r).map(function (p) {\n\t\t\t\treturn ['move', piece.position, p];\n\t\t\t});\n\t\t}\n\t\t*/\n\t\treturn moves;\n\t},\n\n\tmoves_Knight: function moves_Knight(piece) {\n\t\tvar board = this,\n\t\t\tdeltas = [[+2,+1],[+1,+2],[+2,-1],[-1,+2],[-2,-1],[-1,-2],[-2,+1],[+1,-2]],\n\t\t\trow = piece.row,\n\t\t\tcol = piece.col;\n\t\treturn iterable(deltas).filterApply(function (dr, dc) {\n\t\t\treturn board.canMoveTo([row + dr, col + dc], piece.player);\n\t\t}, function (dr, dc) {\n\t\t\treturn board.encodeMove(row, col, row + dr, col + dc);\n\t\t});\n\t},\n\t\n\tmoves_Bishop: function moves_Bishop(piece) {\n\t\tvar board = this,\n\t\t\trow = piece.row,\n\t\t\tcol = piece.col;\n\t\treturn iterable(board.walks([row, col], Checkerboard.DIRECTIONS.DIAGONAL)).map(function (walk) {\n\t\t\tvar cont = true;\n\t\t\treturn walk.tail().takeWhile(function (p) {\n\t\t\t\tvar r = cont && board.canMoveTo(p, piece.player);\n\t\t\t\tcont = cont && board.isEmptyPosition(p);\n\t\t\t\treturn r;\n\t\t\t}).map(function (p) {\n\t\t\t\treturn board.encodeMove(row, col, p[0], p[1]);\n\t\t\t});\n\t\t}).flatten();\n\t},\n\t\n\tmoves_Rook: function moves_Rook(piece) {\n\t\tvar board = this,\n\t\t\trow = piece.row,\n\t\t\tcol = piece.col;\n\t\treturn iterable(board.walks([row, col], Checkerboard.DIRECTIONS.ORTHOGONAL)).map(function (walk) {\n\t\t\tvar cont = true;\n\t\t\treturn walk.tail().takeWhile(function (p) {\n\t\t\t\tvar r = cont && board.canMoveTo(p, piece.player);\n\t\t\t\tcont = cont && board.isEmptyPosition(p);\n\t\t\t\treturn r;\n\t\t\t}).map(function (p) {\n\t\t\t\treturn board.encodeMove(row, col, p[0], p[1]);\n\t\t\t});\n\t\t}).flatten();\n\t},\n\n\tmoves_Queen: function moves_Queen(piece) {\n\t\tvar board = this,\n\t\t\trow = piece.row,\n\t\t\tcol = piece.col;\n\t\treturn iterable(board.walks([row, col], Checkerboard.DIRECTIONS.EVERY)).map(function (walk) {\n\t\t\tvar cont = true;\n\t\t\treturn walk.tail().takeWhile(function (p) {\n\t\t\t\tvar r = cont && board.canMoveTo(p, piece.player);\n\t\t\t\tcont = cont && board.isEmptyPosition(p);\n\t\t\t\treturn r;\n\t\t\t}).map(function (p) {\n\t\t\t\treturn board.encodeMove(row, col, p[0], p[1]);\n\t\t\t});\n\t\t}).flatten();\n\t},\n\n\tmoves_King: function moves_King(piece) {\n\t\tvar board = this,\n\t\t\trow = piece.row,\n\t\t\tcol = piece.col;\n\t\treturn iterable(Checkerboard.DIRECTIONS.EVERY).filterApply(function (dr, dc) {\n\t\t\treturn board.canMoveTo([row + dr, col + dc], piece.player);\n\t\t}, function (dr, dc) {\n\t\t\treturn board.encodeMove(row, col, row + dr, row + dc);\n\t\t});\n\t},\n\n\tapply: function apply(move) {\n\t\tmove = typeof move === 'number' ? this.decodeMove(move) : move;\n\t\tvar fromRow = move[0][0], fromCol = move[0][1],\n\t\t\ttoRow = move[1][0], toCol = move[1][1],\n\t\t\tflags = move[2] |0,\n\t\t\tpromotion = move[3] |0;\n\t\t\tpiece = board[fromRow +','+ fromCol];\n\t\tdelete this[fromRow +','+ fromCol];\n\t\tthis[toRow +','+ toCol] = piece;\n\t\tpiece.flags = flags;\n\t\tif (promotion > 0) {\n\t\t\tpiece.kind = 'PNBRQ'.charAt(promotion);\n\t\t}\n\t\treturn this;\n\t}\n});\n","/** # Chess pieces\n\nThe piece `kinds` of Chess are: Pawn, Knight, Bishop, Rook, Queen and King.\n*/\n\n/** `Piece` is the base class for all pieces in the game. Pieces' classes help to calculate moves,\nand the effects these moves have on the board.\n*/\nvar Piece = declare({\n\tconstructor: function Piece(player, position) {\n\t\tthis.player = player;\n\t\tthis.position = position;\n\t},\n\n\tmoves: base.objects.unimplemented('Piece', 'moves(game, board)'),\n\n\tcanMove: base.objects.unimplemented('Piece', 'canMove(game, board, position)'),\n\n\tmoveTo: function moveTo(position) {\n\t\treturn new this.constructor(this.player, position);\n\t},\n\n\tnext: function (game, board, move) {\n\t\treturn board.clone()\n\t\t\t.__place__(move[1])\n\t\t\t.__place__(move[2], this.moveTo(move[2]));\n\t}\n});\n\nvar KINDS = Chess.kinds = Chess.prototype.kinds = {};\n\nKINDS.Pawn = declare(Piece, { //////////////////////////////////////////////////////////////////////\n\tname: 'Pawn',\n\n\tmoves: function moves(game, board) { // TODO En passant captures.\n\t\tvar piece = this,\n\t\t\tdirection = (this.player === game.players[0]) ? -1 : +1,\n\t\t\tr = [],\n\t\t\tp = [this.position[0] + direction, this.position[1]];\n\t\tif (!board.square(p)) { // move forward\n\t\t\tr.push(p);\n\t\t}\n\t\t[[direction,-1], [direction,+1]].map(function (d) { // capture to the sides.\n\t\t\treturn [piece.position[0] + d[0], piece.position[1] + d[1]];\n\t\t}).forEach(function (p) {\n\t\t\tif (board.isValidCoord(p)) {\n\t\t\t\tvar square = board.square(p);\n\t\t\t\tif (square && square.player !== piece.player) {\n\t\t\t\t\tr.push(p);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tif (this.position[0] === (direction > 0 ? 1 : board.height - 2)) { // double forward at first rank.\n\t\t\tp = [this.position[0] + 2 * direction, this.position[1]];\n\t\t\tif (!board.square(p)) { // move forward\n\t\t\t\tr.push(p);\n\t\t\t}\n\t\t}\n\t\tif (this.position[0] === (direction < 0 ? 1 : board.height - 2)) { // Promotions at the last rank.\n\t\t\tvar promotions = ['Knight', 'Bishop', 'Rook', 'Queen'];\n\t\t\treturn iterable(r).map(function (p) {\n\t\t\t\treturn promotions.map(function (k) {\n\t\t\t\t\treturn ['promote', piece.position, p, k];\n\t\t\t\t});\n\t\t\t}).flatten();\n\t\t} else {\n\t\t\treturn iterable(r).map(function (p) {\n\t\t\t\treturn ['move', piece.position, p];\n\t\t\t});\n\t\t}\n\t},\n\n\t//canMove: TODO,\n\n\tnext: function next(game, board, move) {\n\t\tif (move[0] === 'move') {\n\t\t\treturn Piece.prototype.next.call(this, game, board, move);\n\t\t} else { // Promotion\n\t\t\treturn board.clone()\n\t\t\t\t.__place__(move[1])\n\t\t\t\t.__place__(move[2], new Chess.kinds[move[3]](this.player, move[2]));\n\t\t}\n\t},\n\n\ttoString: function toString() {\n\t\treturn this.player === \"White\" ? \"P\" : \"p\";\n\t}\n}); // declare Chess.kinds.Pawn\n\nKINDS.Knight = declare(Piece, { ////////////////////////////////////////////////////////////////////\n\tname: 'Knight',\n\n\tDELTAS: [[+2,+1],[+1,+2],[+2,-1],[-1,+2],[-2,-1],[-1,-2],[-2,+1],[+1,-2]],\n\n\tmoves: function moves(game, board) {\n\t\tvar piece = this;\n\t\treturn iterable(this.DELTAS).map(function (d) {\n\t\t\treturn ['move', piece.position, [piece.position[0] + d[0], piece.position[1] + d[1]]];\n\t\t}, function (m) {\n\t\t\tif (board.isValidCoord(m[2])) {\n\t\t\t\tvar s = board.square(m[2]);\n\t\t\t\treturn !s || s.player !== piece.player;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t},\n\n\t//canMove: TODO,\n\n\ttoString: function toString() {\n\t\treturn this.player === \"White\" ? \"N\" : \"n\";\n\t}\n}); // declare Chess.kinds.Knight\n\nKINDS.Bishop = declare(Piece, { ////////////////////////////////////////////////////////////////////\n\tname: 'Bishop',\n\n\tmoves: function moves(game, board) {\n\t\tvar piece = this;\n\t\treturn iterable(board.walks(this.position, Checkerboard.DIRECTIONS.DIAGONAL)).map(function (walk) {\n\t\t\tvar cont = true;\n\t\t\treturn walk.tail().takeWhile(function (p) {\n\t\t\t\tvar square = board.square(p),\n\t\t\t\t\tr = cont && (!square || square.player !== piece.player);\n\t\t\t\tcont = cont && !square;\n\t\t\t\treturn r;\n\t\t\t}).map(function (p) {\n\t\t\t\treturn ['move', piece.position, p];\n\t\t\t});\n\t\t}).flatten();\n\t},\n\n\t//canMove: TODO,\n\n\tnext: function (game, board, move) {\n\t\treturn board.clone()\n\t\t\t.__place__(move[1])\n\t\t\t.__place__(move[2], new this.constructor(this.player, move[2]));\n\t},\n\n\ttoString: function toString() {\n\t\treturn this.player === \"White\" ? \"B\" : \"b\";\n\t}\n}); // declare Chess.kinds.Bishop\n\nKINDS.Rook = declare(Piece, { //////////////////////////////////////////////////////////////////////\n\tname: 'Rook',\n\n\tmoves: function moves(game, board) {\n\t\tvar piece = this;\n\t\treturn iterable(board.walks(this.position, Checkerboard.DIRECTIONS.ORTHOGONAL)).map(function (walk) {\n\t\t\tvar cont = true;\n\t\t\treturn walk.tail().takeWhile(function (p) {\n\t\t\t\tvar square = board.square(p),\n\t\t\t\t\tr = cont && (!square || square.player !== piece.player);\n\t\t\t\tcont = cont && !square;\n\t\t\t\treturn r;\n\t\t\t}).map(function (p) {\n\t\t\t\treturn ['move', piece.position, p];\n\t\t\t});\n\t\t}).flatten();\n\t},\n\n\t//canMove: TODO,\n\n\ttoString: function toString() {\n\t\treturn this.player === \"White\" ? \"R\" : \"r\";\n\t}\n}); // declare Chess.kinds.Rook\n\nKINDS.Queen = declare(Piece, { /////////////////////////////////////////////////////////////////////\n\tname: 'Queen',\n\n\tmoves: function moves(game, board) {\n\t\tvar piece = this;\n\t\treturn iterable(board.walks(this.position, Checkerboard.DIRECTIONS.EVERY)).map(function (walk) {\n\t\t\tvar cont = true;\n\t\t\treturn walk.tail().takeWhile(function (p) {\n\t\t\t\tvar square = board.square(p),\n\t\t\t\t\tr = cont && (!square || square.player !== piece.player);\n\t\t\t\tcont = cont && !square;\n\t\t\t\treturn r;\n\t\t\t}).map(function (p) {\n\t\t\t\treturn ['move', piece.position, p];\n\t\t\t});\n\t\t}).flatten();\n\t},\n\n\t//canMove: TODO,\n\n\ttoString: function toString() {\n\t\treturn this.player === \"White\" ? \"Q\" : \"q\";\n\t}\n}); // declare Chess.kinds.Queen\n\nKINDS.King = declare(Piece, { //////////////////////////////////////////////////////////////////////\n\t// TODO Castling.\n\tname: 'King',\n\n\tmoves: function moves(game, board) {\n\t\tvar piece = this;\n\t\treturn iterable(Checkerboard.DIRECTIONS.EVERY).map(function (d) {\n\t\t\treturn ['move', piece.position, [piece.position[0] + d[0], piece.position[1] + d[1]]];\n\t\t}, function (m) {\n\t\t\tif (board.isValidCoord(m[2])) {\n\t\t\t\tvar s = board.square(m[2]);\n\t\t\t\treturn !s || s.player !== piece.player;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t},\n\n\tcanMove: function canMove(game, board, pos) {\n\t\tif (board.isValidCoord(pos)\t&&\n\t\t\t\t(Math.abs(this.position[0] - pos[0]) === 1) !== (Math.abs(this.position[1] - pos[1]) === 1)\n\t\t\t) {\n\t\t\tvar sq = board.square(pos);\n\t\t\treturn !sq || sq.player !== this.player;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t},\n\n\ttoString: function toString() {\n\t\treturn this.player === \"White\" ? \"K\" : \"k\";\n\t}\n}); // declare Chess.kinds.King\n","// See __prologue__.js\n\treturn exports;\n}\n"]}