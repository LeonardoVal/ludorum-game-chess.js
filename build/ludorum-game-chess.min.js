//! ludorum-game-chess 0.0.1

(function(a){"use strict";"function"==typeof define&&define.amd?define(["creatartis-base","sermat","ludorum"],a):"object"==typeof exports&&module.exports?module.exports=a(require("creatartis-base"),require("sermat"),require("ludorum")):this["ludorum-game-chess"]=a(this.base,this.Sermat,this.ludorum)}).call(this,function a(b,c,d){"use strict";var e=b.declare,f=(b.obj,b.copy,b.raise,b.raiseIf),g=(b.Iterable,b.iterable),h=d.Game,i=d.utils.Checkerboard,j=(d.utils.CheckerboardFromString,d.players.UserInterface,{__package__:"ludorum-game-connect4",__name__:"ludorum_game_connect4",__init__:a,__dependencies__:[b,c,d],__SERMAT__:{include:[b,d]}}),k=j.Chess=e(h,{name:"Chess",players:["White","Black"],constructor:function n(a){a=a||{},h.call(this,a.activePlayer||this.players[0]),this.board=a.board?"string"==typeof a.board?n.boardFromFEN(a.board):a.board:this.initialBoard(),this.castling=a.castling||"KQkq",this.enPassant=a.enPassant,this.halfMoves=0|a.halfMoves,this.fullMoves=Math.max(0|a.fullMoves,1);var b=this;this.pieces=g(this.players).map(function(a){return[a,g(b.kinds).mapApply(function(a,b){return[a,[]]}).toObject()]}).toObject(),g(this.board.pieces).forEachApply(function(a,c){b.pieces[c.player][c.name].push(c)})},moves:function(){if(!this.hasOwnProperty("__moves__")){var a=this,c=this.board,d=this.activePlayer();this.pieces[d].King[0];if(this.checkMoves=[],!(this.checkMoves.length<1))throw new Error("Do not know what to do when in check!");this.__moves__=b.obj(d,g(this.pieces[d]).mapApply(function(a,b){return b}).flatten().map(function(b){return b.moves(a,c)}).flatten().toArray())}return this.__moves__},next:function(a,b,c){f(b,"Haps are not required (given ",b,")!");var d=this.activePlayer(),e=a[d],g=this.board.square(e[1]),h={activePlayer:this.opponent(),board:g.next(this,this.board,e),castling:this.castling,enPassant:null,halfMoves:this.halfMoves,fullMoves:this.fullMoves+("Black"===d?1:0)};return c?(this.constructor(h),this):new this.constructor(h)},result:function(){return this.moves()[this.activePlayer()]?null:this.checkMoves.length>0?this.defeat():this.draw()},"static __SERMAT__":{identifier:"Chess",serializer:function(a){return[a.toFEN()]},materializer:function(a,b){return b?k.fromFEN(b[0]):null}},clone:function(){return k.fromFEN(this.toFEN())},"dual coordFromString":function(a){return[+a.charAt(1)+1,a.charCodeAt(0)-"a".charCodeAt(0)]},"dual coordToString":function(a){return String.fromCharCode("a".charCodeAt(0)+a[1])+(a[0]+1)},toString:function(){return this.toFEN()},toFEN:function(){var a=this.board,b=a.horizontals().map(function(b){var c="",d=0;return b.forEach(function(b){var e=a.square(b);e?(d>0&&(c+=d,d=0),c+=e.toString()):d++}),d>0&&(c+=d),c}).join("/");return b+=" "+this.activePlayer().charAt(0).toLowerCase(),b+=" "+this.castling,b+=" "+(this.enPassant?this.coordToString(this.enPassant):"-"),b+=" "+this.halfMoves+" "+this.fullMoves},"static fromFEN":function(a){a=a.trim();var b=this.FEN_REGEXP.exec(a);return f(!b,"Invalid FEN string '",a,"'!"),new this({board:this.boardFromFEN(b[1]),activePlayer:"w"===b[2]?"White":"Black",castling:"-"===b[3]?"":b[3],enPassant:"-"===b[4]?null:this.coordFromString(b[4]),halfMoves:+b[5],fullMoves:+b[6]})},"static FEN_REGEXP":/^((?:[pnbrqkPNBRQK12345678]+\/){7}[pnbrqkPNBRQK12345678]+)\s+([wb])\s+(-|[KQkq]+)\s+(-|[a-h][1-8])\s+(\d+)\s+(\d+)$/,"dual boardFromFEN":function(a){var b=a.split("/"),c={p:this.kinds.Pawn,n:this.kinds.Knight,b:this.kinds.Bishop,r:this.kinds.Rook,q:this.kinds.Queen,k:this.kinds.King},e=[];return b.forEach(function(a,b){var d=0;g(a).forEach(function(a){isNaN(a)?(e.push(new(c[a.toLowerCase()])(a===a.toLowerCase()?"Black":"White",[b,d])),d++):d+=0|a})}),new d.utils.CheckerboardFromPieces(8,8,e)},"static heuristics":{}});k.initialBoard=k.prototype.initialBoard=function(){return k.boardFromFEN("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR")},d.games.Chess=k,k.__SERMAT__.identifier=j.__package__+"."+k.__SERMAT__.identifier,j.__SERMAT__.include.push(k),c.include(j);var l=e({constructor:function(a,b){this.player=a,this.position=b},moves:b.objects.unimplemented("Piece","moves(game, board)"),canMove:b.objects.unimplemented("Piece","canMove(game, board, position)"),moveTo:function(a){return new this.constructor(this.player,a)},next:function(a,b,c){return b.clone().__place__(c[1]).__place__(c[2],this.moveTo(c[2]))}}),m=k.kinds=k.prototype.kinds={};return m.Pawn=e(l,{name:"Pawn",moves:function(a,b){var c=this,d=this.player===a.players[0]?-1:1,e=[],f=[this.position[0]+d,this.position[1]];if(b.square(f)||e.push(f),[[d,-1],[d,1]].map(function(a){return[c.position[0]+a[0],c.position[1]+a[1]]}).forEach(function(a){if(b.isValidCoord(a)){var d=b.square(a);d&&d.player!==c.player&&e.push(a)}}),this.position[0]===(d>0?1:b.height-2)&&(f=[this.position[0]+2*d,this.position[1]],b.square(f)||e.push(f)),this.position[0]===(d<0?1:b.height-2)){var h=["Knight","Bishop","Rook","Queen"];return g(e).map(function(a){return h.map(function(b){return["promote",c.position,a,b]})}).flatten()}return g(e).map(function(a){return["move",c.position,a]})},next:function(a,b,c){return"move"===c[0]?l.prototype.next.call(this,a,b,c):b.clone().__place__(c[1]).__place__(c[2],new k.kinds[c[3]](this.player,c[2]))},toString:function(){return"White"===this.player?"P":"p"}}),m.Knight=e(l,{name:"Knight",DELTAS:[[2,1],[1,2],[2,-1],[-1,2],[-2,-1],[-1,-2],[-2,1],[1,-2]],moves:function(a,b){var c=this;return g(this.DELTAS).map(function(a){return["move",c.position,[c.position[0]+a[0],c.position[1]+a[1]]]},function(a){if(b.isValidCoord(a[2])){var d=b.square(a[2]);return!d||d.player!==c.player}return!1})},toString:function(){return"White"===this.player?"N":"n"}}),m.Bishop=e(l,{name:"Bishop",moves:function(a,b){var c=this;return g(b.walks(this.position,i.DIRECTIONS.DIAGONAL)).map(function(a){var d=!0;return a.tail().takeWhile(function(a){var e=b.square(a),f=d&&(!e||e.player!==c.player);return d=d&&!e,f}).map(function(a){return["move",c.position,a]})}).flatten()},next:function(a,b,c){return b.clone().__place__(c[1]).__place__(c[2],new this.constructor(this.player,c[2]))},toString:function(){return"White"===this.player?"B":"b"}}),m.Rook=e(l,{name:"Rook",moves:function(a,b){var c=this;return g(b.walks(this.position,i.DIRECTIONS.ORTHOGONAL)).map(function(a){var d=!0;return a.tail().takeWhile(function(a){var e=b.square(a),f=d&&(!e||e.player!==c.player);return d=d&&!e,f}).map(function(a){return["move",c.position,a]})}).flatten()},toString:function(){return"White"===this.player?"R":"r"}}),m.Queen=e(l,{name:"Queen",moves:function(a,b){var c=this;return g(b.walks(this.position,i.DIRECTIONS.EVERY)).map(function(a){var d=!0;return a.tail().takeWhile(function(a){var e=b.square(a),f=d&&(!e||e.player!==c.player);return d=d&&!e,f}).map(function(a){return["move",c.position,a]})}).flatten()},toString:function(){return"White"===this.player?"Q":"q"}}),m.King=e(l,{name:"King",moves:function(a,b){var c=this;return g(i.DIRECTIONS.EVERY).map(function(a){return["move",c.position,[c.position[0]+a[0],c.position[1]+a[1]]]},function(a){if(b.isValidCoord(a[2])){var d=b.square(a[2]);return!d||d.player!==c.player}return!1})},canMove:function(a,b,c){if(b.isValidCoord(c)&&1===Math.abs(this.position[0]-c[0])!=(1===Math.abs(this.position[1]-c[1]))){var d=b.square(c);return!d||d.player!==this.player}return!1},toString:function(){return"White"===this.player?"K":"k"}}),j});
//# sourceMappingURL=ludorum-game-chess.min.js.map